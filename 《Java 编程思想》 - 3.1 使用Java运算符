运行位于一个“包裹”里的程序时，随时都要注意这方面的问题。 下面是例子：
//: Assignment.java
// Assignment with objects is a bit tricky
package c03;
class Number {
int i;
}
public class Assignment {
public static void main(String[] args) {
Number n1 = new Number();
Number n2 = new Number();
n1.i = 9;
n2.i = 47;
System.out.println("1: n1.i: " + n1.i +
", n2.i: " + n2.i);
n1 = n2;
System.out.println("2: n1.i: " + n1.i +
", n2.i: " + n2.i);
n1.i = 27;
System.out.println("3: n1.i: " + n1.i +
", n2.i: " + n2.i);
}
} ///:~
1: n1.i: 9, n2.i: 47
2: n1.i: 47, n2.i: 47
3: n1.i: 27, n2.i: 27
看来改变n1的同时也改变了n2！这是由于无论n1还是n2都包含了相同的句柄，它指向相同的
对象（最初的句柄位于n1内部，指向容纳了值9的一个对象。在赋值过程中，那个句柄实际已
经丢失；它的对象会由“垃圾收集器”自动清除）。 这种特殊的现象通常也叫作“别名”，是Java
操作对象的一种基本方式。

//: Equivalence.java
public class Equivalence {
public static void main(String[] args) {
Integer n1 = new Integer(47);
Integer n2 = new Integer(47);
System.out.println(n1 == n2);
System.out.println(n1 != n2);
}
} ///:~

但尽管对象的内容相
同，句柄却是不同的，而==和!=比较的正好就是对象句柄。所以输出结果实际上先是false，
再是true。
想对比两个对象的实际内容是否相同
//: EqualsMethod.java
public class EqualsMethod {
public static void main(String[] args) {
Integer n1 = new Integer(47);
Integer n2 = new Integer(47);
System.out.println(n1.equals(n2));
}
} ///:~
此时的结果又变回了false！这是由于equals()的默认行为是比较句柄。所以除非在自己的新类
中改变了equals()，否则不可能表现出我们希望的行为。
大多数Java类库都实现了equals()，所以它实际比较的是对象的内容，而非它们的句柄。
1. 短路
“短路”
if(test1(0)) && test2(2) && test3(2))
第一个测试生成一个true结果，所以表达式求值会继续下去。然而，第二个测试产生了一个
false结果。由于这意味着整个表达式肯定为false，所以为什么还要继续剩余的表达式呢？这
样做只会徒劳无益。事实上，“短路”一词的由来正种因于此。如果一个逻辑表达式的所有部分
都不必执行下去，那么潜在的性能提升将是相当可观的。
3.1.7 按位运算符
按位运算符可与等号（=）联合使用，以便合并运算及赋值：&=，|=和^=都是合法的（由于~
是一元运算符，所以不可与=联合使用）。
3.1.8 移位运算符 (完全不会)
3.1.10 逗号运算符
3.1.12 运算符常规操作规则
类似的一个问题是使用按位AND和OR，而不是逻辑AND和OR。按位AND和
OR使用两个字符之一（&或|），而逻辑AND和OR使用两个相同的字符（&&或||）。就
象“=”和“==”一样，键入一个字符当然要比键入两个简单。在Java里，编译器同样可防止这一
点，因为它不允许我们强行使用一种并不属于的类型。
3.1.13 造型运算符
1. 字面值
十六进制（Base 16）——它适用于所有整数数据类型——用一个前置的0x或0X指示。并在
后面跟随采用大写或小写形式的0-9以及a-f。
八进制（Base 8）是用数字中的一个前置0以及0-7的数位指示的
字面值后的尾随字符标志着它的类型。若为大写或小写的L，代表long；大写或小写的F，代
表float；大写或小写的D，则代表double。
指数总是采用一种我们认为很不直观的记号方法：1.39e-47f。在科学与工程学领域，“e”代表
自然对数的基数，约等于2.718（Java一种更精确的double值采用Math.E的形式）。它在
象“1.39×e的-47次方”这样的指数表达式中使用，意味着“1.39×2.718的-47次方”。
2. 转型
假若对主数据类型执行任何算术或按位运算，只要它们“比int小”（即char，byte或
者short），那么在正式执行运算之前，那些值会自动转换成int。
3.1.14 Java没有“sizeof”
在C和C++中，sizeof()运算符能满足我们的一项特殊需要：获知为数据项目分配的字符数量。
在C和C++中，size()最常见的一种应用就是“移植”。不同的数据在不同的机器上可能有不同的
大小，所以在进行一些对大小敏感的运算时，程序员必须对那些类型有多大做到心中有数。
例如，一台计算机可用32位来保存整数，而另一台只用16位保存。显然，在第一台机器中，
程序可保存更大的值。正如您可能已经想到的那样，移植是令C和C++程序员颇为头痛的一个
问题。 Java不需要sizeof()运算符来满足这方面的需要，因为所有数据类型在所有机器的大小
都是相同的。我们不必考虑移植问题——Java本身就是一种“与平台无关”的语言。


